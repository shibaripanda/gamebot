import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectBot } from 'nestjs-telegraf';
// import { Group } from 'src/group/group.model';
// import { Group } from 'src/group/group.model';
import { GroupService } from 'src/group/group.service';
// import { User } from 'src/user/user.model';
// import { User } from 'src/user/user.model';
import { UserService } from 'src/user/user.service';
import { Telegraf } from 'telegraf';

@Injectable()
export class BotService {
  constructor(
    @InjectBot() private bot: Telegraf,
    private readonly config: ConfigService,
    private groupService: GroupService,
    private userService: UserService,
  ) {}

  async startRegistration(userId: number, groupId: string) {
    const group = await this.groupService.getGroup(groupId);
    console.log(group);
    if (!group) {
      await this.getGroupsButtonsList(userId);
      return;
    }
    const res = await this.groupService.addUserToGroup(groupId, userId);
    if (!res) {
      await this.soldOutMessage(userId);
      return;
    }
    await this.userService.addRegData(userId, 'reg_groupId', groupId);
    // await this.userService.addRegData(userId, 'next_step_data', 'reg_gameName');
    await this.firstStepReg(userId);
  }

  async firstStepReg(userId: number) {
    const buttons = [
      [{ text: '–ü–æ–∫—É–ø–∞—é —á–µ—Ä–µ–∑ —Ç–µ–±—è', callback_data: 'reg_gameName' }],
      [{ text: '–ë—É–¥—É –ø–æ–∫—É–ø–∞—Ç—å —Å–∞–º', callback_data: '!!!!!!!!!!!' }],
      [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data: 'mainMenu' }],
    ];
    await this.bot.telegram.sendMessage(
      userId,
      `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∞–∫—Ü–∏—é –∞–ª—å—è–Ω—Å–∞. (–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∞–∫—Ü–∏–∏)`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async confirmation(userId: number) {
    const user = await this.userService.getUser(userId);
    if (!user || !user.reg_groupId) return;

    const group = await this.groupService.getGroup(user.reg_groupId);
    if (!group) return;

    const message = [
      '–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:',
      '',
      `üéì –ì—Ä—É–ø–ø–∞: ${group.promo}`,
      `üéÆ –ò–≥—Ä–æ–≤–æ–µ –∏–º—è: ${user.reg_gameName || '‚Äî'}`,
      `üìß Email: ${user.reg_email || '‚Äî'}`,
      `üîí –ü–∞—Ä–æ–ª—å: ${user.reg_password || '‚Äî'}`,
    ].join('\n');

    const buttons = [
      [{ text: '‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ', callback_data: 'succssesRegistrtion' }],
      [{ text: '‚úèÔ∏è –ù–∞–¥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'reg_gameName' }],
    ];

    await this.bot.telegram.sendMessage(userId, message, {
      reply_markup: { inline_keyboard: buttons },
    });
  }

  // async confirmation(userId: number) {
  //   const buttons = [
  //     [{ text: '–í—Å–µ –≤–µ—Ä–Ω–æ', callback_data: 'succssesRegistrtion' }],
  //     [{ text: '–ù–∞–¥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'reg_gameName' }],
  //   ];
  //   const user: User | null = await this.userService.getUser(userId);
  //   if (user) {
  //     if (user.reg_groupId) {
  //       const group: Group | null = await this.groupService.getGroup(
  //         user.reg_groupId,
  //       );
  //       if (group) {
  //         await this.bot.telegram.sendMessage(
  //           userId,
  //           `–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n${group.promo}\n${user.reg_gameName}\n${user.reg_email}\n${user.reg_password}`,
  //           {
  //             reply_markup: {
  //               inline_keyboard: buttons,
  //             },
  //           },
  //         );
  //       }
  //     }
  //   }
  // }

  async askPassword(userId: number) {
    const buttons = [
      // [{ text: '–í—Å–µ –≤–µ—Ä–Ω–æ', callback_data: 'succssesRegistrtion' }],
      // [{ text: '–ù–∞–¥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'reg_gameName' }],
    ];
    await this.bot.telegram.sendMessage(
      userId,
      `–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async askEmail(userId: number) {
    const buttons = [
      // [{ text: '–ù–∞–¥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'secondStepInSide' }],
    ];
    await this.bot.telegram.sendMessage(
      userId,
      `–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ—á—Ç—É –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async askGameName(userId: number) {
    const buttons = [
      // [{ text: '–ù–∞–¥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'secondStepInSide' }],
    ];
    await this.bot.telegram.sendMessage(
      userId,
      `–°—É–ø–µ—Ä! –ü–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –≤ –∏–≥—Ä–µ`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async soldOutMessage(userId: number) {
    const buttons = [
      [{ text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É', callback_data: 'takePlace' }],
      [{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }],
    ];
    await this.bot.telegram.sendMessage(
      userId,
      `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã :( –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é. –ê–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Ö–æ–¥–µ –∑–∞–ø–∏—Å–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ß–∞—Ç –∑–∞–∫—É–ø–æ–∫"`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async extraService(userId: number) {
    const buttons = [[{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }]];
    await this.bot.telegram.sendMessage(
      userId,
      `–ö—Ä–æ–º–µ –¥–æ–Ω–∞—Ç–∞ –≤ –∏–≥—Ä—ã —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –æ–ø–ª–∞—Ç–æ–π –ø–æ–¥–ø–∏—Å–æ–∫ ... —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async faq(userId: number) {
    const buttons = [
      [{ text: '–ü–æ–Ω—è—Ç–Ω–æ, –∑–∞–ø–∏—Å—ã–≤–∞—é—Å—å!', callback_data: 'takePlace' }],
      [{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }],
    ];
    await this.bot.telegram.sendMessage(
      userId,
      `–í–æ—Ç –∫–∞–∫ —Ç—É—Ç –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ: —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω...`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  // async getListUsersOfGroup(groupName: string) {
  //   const group: Group | null = await this.groupService.getGroup(groupName);
  //   const resList: { index: number; gameName: string }[] = [];
  //   if (group) {
  //     for (const user of group.users) {
  //       if (user) {
  //         const currentUser: User | null = await this.userService.getUser(user);
  //         if (currentUser) {
  //           resList.push({
  //             index: group.users.indexOf(user) + 1,
  //             gameName: currentUser.gameName,
  //           });
  //         }
  //       } else {
  //         resList.push({
  //           index: group.users.indexOf(user) + 1,
  //           gameName: '--',
  //         });
  //       }
  //     }
  //   }
  //   return resList;
  // }

  async getGroupsButtonsList(userId: number) {
    const allGroups = await this.groupService.getGroups();
    const buttons = allGroups.map((gr) => [
      {
        text:
          gr.promo +
          ' ' +
          `(${gr.users.filter((u) => u).length}/${gr.maxCountUsersInGroup})`,
        callback_data: 'reservPlaceInGroup:' + gr._id,
      },
    ]);
    buttons.push([
      { text: '–û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'takePlace' },
      { text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' },
    ]);
    // buttons.push([{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }]);
    await this.bot.telegram.sendMessage(
      userId,
      `–û—Ç–ª–∏—á–Ω–æ –≤ –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å? –ü—Ä–æ–¥–æ–ª–∂–∞—è –∑–∞–ø–∏—Å—å –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö–¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í –Ω–∞—á–∞–ª–æ".`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async startMessage(userId: number) {
    await this.bot.telegram.sendMessage(
      userId,
      '–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ö—Ä—é–≥–µ—Ä-–±–æ—Ç!üòé –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–∫—É–ø–∫—É –∞–∫—Ü–∏–π –∞–ª—å—è–Ω—Å–∞!ü§ù',
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–∫—Ü–∏—é –∞–ª—å—è–Ω—Å–∞',
                callback_data: 'takePlace',
              },
            ],
            [{ text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–µ', callback_data: 'faq' }],
            [
              {
                text: '–ü–æ–¥–∞—Ä–∫–∏ –æ—Ç –ö—Ä—é–≥–µ—Ä–∞',
                callback_data: 'stopReciveMessages',
              },
            ],
            [
              {
                text: '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
                callback_data: 'extraService',
              },
            ],
          ],
        },
      },
    );
  }

  async sendTextMessage(userId: number, text: string) {
    await this.bot.telegram.sendMessage(userId, text);
  }

  async sendOneTimeInvite(userId: number) {
    const chatId = this.config.get<string>('ID_CHANNEL')!;
    const time = Number(this.config.get<string>('TIME_LIFE_LINK')!);
    const expireDate = (Math.floor(Date.now() / 1000) + 3600) * time;
    const inviteLink = await this.bot.telegram.createChatInviteLink(chatId, {
      member_limit: 1,
      expire_date: expireDate,
      name: `Invite for user ${userId}`,
    });
    await this.bot.telegram.sendMessage(
      userId,
      `–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª (–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: ${time}):\n${inviteLink.invite_link}`,
    );
  }

  async alertUserHaveAccess(userId: string) {
    await this.bot.telegram.sendMessage(
      Number(userId),
      '–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø', callback_data: 'closeAccess' }],
          ],
        },
      },
    );
  }
}
