import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectBot } from 'nestjs-telegraf';
import { AppService } from 'src/app/app.service';
import { DataNewReg } from 'src/app/interfaces/dataNewReg';
import { Group } from 'src/group/group.model';
import { GroupService } from 'src/group/group.service';
import { UserService } from 'src/user/user.service';
import { Telegraf } from 'telegraf';
import { InlineKeyboardButton, Message } from '@telegraf/types';
import { appText } from 'src/app/texts';
import { User } from 'src/user/user.model';

@Injectable()
export class BotService {
  constructor(
    @InjectBot() private bot: Telegraf,
    private readonly config: ConfigService,
    private groupService: GroupService,
    private userService: UserService,
    private appService: AppService,
  ) {}

  async sendDocument(chatId: number, filePath: string, options?: any) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    await this.bot.telegram.sendDocument(chatId, { source: filePath }, options);
  }

  async getImage(file_id: string) {
    try {
      const file = await this.bot.telegram.getFile(file_id);
      const fileUrl = `https://api.telegram.org/file/bot${this.config.get<string>('BOT_TOKEN')}/${file.file_path}`;
      const res = await fetch(fileUrl);
      const arrayBuffer = await res.arrayBuffer();
      const base64 = Buffer.from(arrayBuffer).toString('base64');
      const mime = res.headers.get('content-type') || 'image/jpeg';
      return `data:${mime};base64,${base64}`;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∏–∑ Telegram:', err);
      return null;
    }
  }

  async broadcastMessageTest(
    text: string,
    all: boolean,
    userId: number,
  ): Promise<void> {
    let buttons: InlineKeyboardButton[][] = [];
    if (!all) {
      buttons = [
        [
          {
            text: '–ü–æ–¥–∞—Ä–∫–∏ –æ—Ç –ö—Ä—é–≥–µ—Ä–∞',
            callback_data: 'takePlacePresent',
          },
        ],
        [{ text: `–í –Ω–∞—á–∞–ª–æ`, callback_data: 'mainMenu' }],
      ];
    } else {
      buttons = [[{ text: `–í –Ω–∞—á–∞–ª–æ`, callback_data: 'mainMenu' }]];
    }

    try {
      await this.bot.telegram
        .sendMessage(userId, text + `\n\n –¢–µ—Å—Ç`, {
          reply_markup: { inline_keyboard: buttons },
          parse_mode: 'HTML',
        })
        .then(async (res: Message) => {
          await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
        })
        .catch((e) => {
          console.error(`–û—à–∏–±–∫–∞ Telegram API –¥–ª—è ${userId}:`, e);
        });
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, err);
    }
  }

  async broadcastMessage(
    text: string,
    all: boolean,
    userId: number,
  ): Promise<void> {
    let userIds: number[] = [];
    let buttons: InlineKeyboardButton[][] = [];
    if (!all) {
      userIds = await this.groupService.getTelegramIdsForPresentPromo();
      buttons = [
        [
          {
            text: '–ü–æ–¥–∞—Ä–∫–∏ –æ—Ç –ö—Ä—é–≥–µ—Ä–∞',
            callback_data: 'takePlacePresent',
          },
        ],
        [{ text: `–í –Ω–∞—á–∞–ª–æ`, callback_data: 'mainMenu' }],
      ];
    } else {
      buttons = [[{ text: `–í –Ω–∞—á–∞–ª–æ`, callback_data: 'mainMenu' }]];
      const list = await this.userService.getUsersId();
      const bunUsers = await this.appService.getBunUsers();

      const bunSet = new Set(bunUsers);
      userIds = list.filter((id) => !bunSet.has(id));
    }

    if (!userIds.length) {
      console.warn('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
      return;
    }
    userIds.push(userId);

    for (let i = 0; i < userIds.length; i++) {
      const userId = userIds[i];

      try {
        await this.bot.telegram
          .sendMessage(
            userId,
            userId === userId
              ? text + `\n\n + –†–∞—Å—Å—ã–ª–∫–∞: ${userIds.length - 1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
              : text,
            {
              reply_markup: { inline_keyboard: buttons },
              parse_mode: 'HTML',
            },
          )
          .then(async (res: Message) => {
            await this.updateLastMessageAndEditOldMessage(
              userId,
              res.message_id,
            );
          })
          .catch((e) => {
            console.error(`–û—à–∏–±–∫–∞ Telegram API –¥–ª—è ${userId}:`, e);
          });
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, err);
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      await new Promise((resolve) => setTimeout(resolve, 50));
    }
    console.log(`–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  }

  async adsPromoMessage(groupId: string) {
    const group = await this.groupService.getGroup(groupId);
    const listReceivers = await this.userService.getUserTelegramIds();
    const bunUsers = await this.appService.getBunUsers();

    if (!group || !listReceivers.length) {
      console.error('Group not found or no receivers');
      return false;
    }

    const list = listReceivers.filter((us) => !bunUsers?.includes(us));

    const buttons = [
      [
        {
          text: `${group.promo}`,
          callback_data: 'reservPlaceInGroup:' + group._id,
        },
      ],
      [{ text: `–í –Ω–∞—á–∞–ª–æ`, callback_data: 'mainMenu' }],
    ];

    for (let i = 0; i < list.length; i++) {
      const userId = list[i];
      try {
        if (!group.image) {
          await this.bot.telegram
            .sendMessage(userId, group.promoText, {
              parse_mode: 'HTML',
              reply_markup: { inline_keyboard: buttons },
            })
            .then(async (res: Message) => {
              await this.updateLastMessageAndEditOldMessage(
                userId,
                res.message_id,
              );
            })
            .catch((e) => {
              console.log(e);
            });
        } else {
          await this.bot.telegram
            .sendPhoto(userId, group.image, {
              caption: group.promoText,
              parse_mode: 'HTML',
              reply_markup: { inline_keyboard: buttons },
            })
            .then(async (res: Message) => {
              await this.updateLastMessageAndEditOldMessage(
                userId,
                res.message_id,
              );
            })
            .catch((e) => {
              console.log(e);
            });
        }
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, err);
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
      await new Promise((resolve) => setTimeout(resolve, 50)); // 50 –º—Å
    }

    console.log(`–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${list.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  }

  async testPromoMessage(groupId: string, userId: number) {
    const group = await this.groupService.getGroup(groupId);
    if (!group) {
      console.error('Group not found');
      return false;
    }
    const buttons = [
      [
        {
          text: `${group.promo}`,
          callback_data: 'reservPlaceInGroup:' + group._id,
        },
      ],
      [
        {
          text: `–í –Ω–∞—á–∞–ª–æ`,
          callback_data: 'mainMenu',
        },
      ],
    ];
    if (!group.image) {
      await this.bot.telegram
        .sendMessage(userId, group.promoText, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: buttons,
          },
        })
        .then(async (res: Message) => {
          await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
        })
        .catch((e) => {
          console.log(e);
        });
    } else {
      await this.bot.telegram
        .sendPhoto(userId, group.image, {
          caption: group.promoText,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: buttons,
          },
        })
        .then(async (res: Message) => {
          await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
        })
        .catch((e) => {
          console.log(e);
        });
    }
  }

  async finishGroupRegistration(group: Group) {
    await this.bot.telegram
      .sendMessage(
        this.config.get<number>('GROUP_TELEGRAM_OPEN')!,
        `üöÄ <b>${group.name}</b>\nüöÄ –ì—Ä—É–ø–ø–∞ –∑–∞–∫—É–ø–∏–ª–∞—Å—å, –≤—Å–µ–º —Å–ø–∞—Å–∏–±–æ!`,
        {
          message_thread_id: this.config.get<number>('TOPIC')!,
          parse_mode: 'HTML',
        },
      )
      .catch((e) => {
        console.log(e);
      });
    for (const user of group.users) {
      if (user) {
        await this.bot.telegram
          .sendMessage(
            user.telegramId,
            `üöÄ <b>${group.name}</b>\nüöÄ –ì—Ä—É–ø–ø–∞ –∑–∞–∫—É–ø–∏–ª–∞—Å—å!\n${user.anonName} ${user.gameName}\n/start`,
            { parse_mode: 'HTML' },
          )
          .catch((e) => {
            console.log(e);
          });
      }
    }
    return await this.groupService.closeGroup(group._id);
  }

  async sendRekvizitiToGroupUsers(groupId: string): Promise<Group | false> {
    const group = await this.groupService.getGroup(groupId);
    if (!group) {
      console.error('Group not found');
      return false;
    }
    const rekviz = await this.appService.getPaymentMetods();
    console.log(rekviz);
    if (!rekviz || !rekviz.length) {
      console.error('Rekviz not found');
      return false;
    }

    let wasUpdated = false;

    for (const user of group.users.filter((us) => us?.byByKruger === true)) {
      if (!user || !user.telegramId || user.recivedRekviziti) {
        console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –†–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏–ª–∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ');
        continue;
      }
      const rendom = this.groupService.getRandomArrayElement(rekviz);

      try {
        await this.bot.telegram
          .sendMessage(
            user.telegramId,
            `<b>${user.gameName} (${user.anonName}) ${group.aliance}</b>\n–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n${rendom.paymentData} \n/start`,
            { parse_mode: 'HTML' },
          )
          .then((res: Message) => {
            user.recivedRekviziti = true;
            wasUpdated = true;
            console.log(res.message_id);
            // await this.updateLastMessageAndEditOldMessage(
            //   user.telegramId,
            //   res.message_id,
            // );
          })
          .catch((er) => {
            console.log(er);
          });
      } catch (err) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä—É ${user.telegramId}`,
          err,
        );
      }
      await new Promise((resolve) => setTimeout(resolve, 50));
    }

    if (wasUpdated) {
      await group.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    }

    // await this.managerMessage(group);

    return group;
  }

  async sendAlianceNameToGroupUsers(groupId: string): Promise<Group | false> {
    const group = await this.groupService.getGroup(groupId);
    if (!group) {
      console.error('Group not found');
      return false;
    }

    let wasUpdated = false;

    for (const user of group.users) {
      if (!user || !user.telegramId || user.recivedAlianceName) {
        console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ê–ª—å—è–Ω—Å–∞ –∏–ª–∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ');
        continue;
      }

      try {
        await this.bot.telegram
          .sendMessage(
            user.telegramId,
            `<b>${user.gameName} (${user.anonName})</b>\n–ê–ª—å—è–Ω—Å: ${group.aliance}\n/start`,
            { parse_mode: 'HTML' },
          )
          .then((res: Message) => {
            user.recivedAlianceName = true;
            wasUpdated = true;
            console.log(res.message_id);
            // await this.updateLastMessageAndEditOldMessage(
            //   user.telegramId,
            //   res.message_id,
            // );
          })
          .catch((er) => {
            console.log(er);
          });
      } catch (err) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä—É ${user.telegramId}`,
          err,
        );
      }
      await new Promise((resolve) => setTimeout(resolve, 50));
    }

    if (wasUpdated) {
      await group.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    }

    await this.managerMessage(group);

    return group;
  }

  async managerMessage(group: Group) {
    let text = `${group.name} | ${group.promo} | ${group.aliance} | ${group.present ? 'üéÅ' : ''}`;
    for (const res of group.users) {
      if (res) {
        const message = [
          `${group.users.indexOf(res) + 1}. ${res.byByKruger ? 'Kruger' : '–°–∞–º'}`,
          `<a href="tg://user?id=${res.telegramId}">üîó –ù–∞–ø–∏—Å–∞—Ç—å</a>`,
          `ü•∏ <code>${res.anonName}</code>`,
          `üéÆ <code>${res.gameName}</code>`,
          res.email && `üìß <code>${res.email}</code>`,
          res.password && `üîí <code>${res.password}</code>`,
        ]
          .filter(Boolean)
          .join('\n');
        text = text + '\n-----\n' + message;
      }
    }

    await this.bot.telegram
      .sendMessage(Number(this.config.get<number>('MANAGER')!), text, {
        parse_mode: 'HTML',
      })
      .catch((e) => {
        console.log(e);
      });
  }

  async sendPaymentToKrugerUsers(
    groupId: string,
    regUsersIds: string[],
    paymentId: string,
  ): Promise<Group | false> {
    const group = await this.groupService.getGroup(groupId);
    if (!group) {
      console.error('Group not found');
      return false;
    }

    const payment = await this.appService.getPaymentMetod(paymentId);
    if (!payment) {
      console.error('Payment not found');
      return false;
    }

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º _id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const userId of regUsersIds) {
      const user = group.users.find((u) => u?._id?.toString() === userId);
      if (!user || !user.telegramId) {
        console.warn(
          `User with ID ${userId} not found in group or has no telegramId`,
        );
        continue;
      }

      try {
        await this.bot.telegram
          .sendMessage(
            user.telegramId,
            `<b>${user.gameName} (${user.anonName})</b>\nüí∏ –†–µ–∫–≤–∏–∑–∏—Ç—ã:\n ${payment.paymentData}\n/start`,
            { parse_mode: 'HTML' },
          )
          .then(async (res: Message) => {
            await this.updateLastMessageAndEditOldMessage(
              user.telegramId,
              res.message_id,
            );
          })
          .catch((er) => {
            console.log(er);
          });
      } catch (err) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä—É ${user.telegramId}`,
          err,
        );
      }
    }

    return group;
  }

  async notifyUsersInGroupByIdsConfirmation(
    groupId: string,
    userIds: string[],
  ): Promise<void> {
    const group = await this.groupService.getGroup(groupId);
    if (!group || !group.users) return;

    const usersToNotify = group.users.filter(
      (user) =>
        user && userIds.includes(user._id?.toString() ?? user.confirmation),
    );

    for (const user of usersToNotify) {
      if (user && user.telegramId && user.byByKruger === true) {
        await this.sendTextMessage(
          user.telegramId,
          `‚úÖ <b>${user.anonName} (${user.gameName})</b>\n–ú–æ–∂–Ω–æ –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, –Ω–æ –ø–æ–∫–∞ –∏–∑ –∞–ª—å—è–Ω—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–µ–ª—å–∑—è ‚ö†Ô∏è\n/start`,
        );
      }
    }
  }

  async startRegistrationByMe(userId: number, groupId: string) {
    const group = await this.groupService.getGroup(groupId);
    console.log(group);
    if (!group) {
      await this.getGroupsButtonsList(userId);
      return;
    }
    const res = await this.groupService.isUnconfirmedUserInTopHalf(
      groupId,
      userId,
    );
    if (!res) {
      console.log('soldOut');
      await this.soldOutMessage(userId);
      return;
    }
    await this.userService.addRegData(userId, 'reg_groupId', groupId);
    await this.userService.addRegData(
      userId,
      'next_step_data',
      'reg_screenNoPromo',
    );
    await this.firstStepRegNoKruger(userId);
  }

  async firstStepRegNoKruger(userId: number) {
    const buttons = [[{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data: 'mainMenu' }]];
    await this.bot.telegram
      .sendMessage(
        userId,
        `–•–æ—Ä–æ—à–æ, —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –¥–∞–Ω–Ω–∞—è –∞–∫—Ü–∏—è –µ—â–µ –Ω–µ –∫—É–ø–ª–µ–Ω–∞.`,
        {
          reply_markup: {
            inline_keyboard: buttons,
          },
        },
      )
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async startRegistrationPresent(userId: number, groupId: string) {
    const group = await this.groupService.getGroup(groupId);
    console.log(group);
    if (!group) {
      await this.getGroupsButtonsList(userId);
      return;
    }
    const res = await this.groupService.addUserToGroup(groupId, userId);
    if (!res) {
      console.log('soldOutPresent');
      await this.soldOutMessagePresent(userId);
      return;
    }
    await this.userService.addRegData(userId, 'reg_groupId', groupId);
    await this.userService.addRegData(
      userId,
      'next_step_data',
      'reg_gameNamePresent',
    );
    await this.firstStepRegPresent(userId);
  }

  async firstStepRegPresent(userId: number) {
    const buttons = [
      [
        { text: '–ù–∞–∑–∞–¥', callback_data: 'takePlacePresent' },
        { text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' },
      ],
    ];
    await this.bot.telegram
      .sendMessage(
        userId,
        `<b>–°—É–ø–µ—Ä!</b> \n–ü–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –≤ –∏–≥—Ä–µ`,
        {
          reply_markup: {
            inline_keyboard: buttons,
          },
          parse_mode: 'HTML',
        },
      )
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async startRegistration(userId: number, groupId: string) {
    const group = await this.groupService.getGroup(groupId);
    console.log(group);
    if (!group) {
      await this.getGroupsButtonsList(userId);
      return;
    }
    const res = await this.groupService.addUserToGroup(groupId, userId);
    if (!res) {
      console.log('soldOut');
      await this.soldOutMessage(userId);
      return;
    }
    await this.userService.addRegData(userId, 'reg_groupId', groupId);
    // await this.userService.addRegData(userId, 'next_step_data', 'reg_gameName');
    await this.firstStepReg(userId, groupId, group.image);
  }

  async buyByMe(userId: number, groupId: string) {
    const buttons = [
      [
        {
          text: '–ß–µ—Å—Ç–Ω–æ –ø–æ–∫—É–ø–∞—é —Å–∞–º',
          callback_data: `buyByMeStartReg:${groupId}`,
        },
      ],
      [{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }],
    ];
    await this.bot.telegram
      .sendMessage(
        userId,
        `–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º! –ù–æ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
1- –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–µ—Å—Ç. –í—ã –¥–æ–ª–∂–Ω—ã —É—Å–ø–µ—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –ø–µ—Ä–≤—ã—Ö —Ä—è–¥–∞—Ö, –ª–∏–±–æ –ø—Ä–∏–¥–µ—Ç—Å—è –∂–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ä—Ç –≥—Ä—É–ø–ø—ã.
2- –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∫ –Ω–∞–º –≤ –∑–∞–∫—É–ø–∫–∏, –ø–æ–∫—É–ø–∞—è –∞–∫—Ü–∏—é –Ω–µ —É –Ω–∞—Å, —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ! –ü—Ä–æ—à—É, –µ—Å–ª–∏ –≤—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –Ω–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –∞ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å - –Ω–µ —Ç—Ä–∞—Ç—å—Ç–µ –Ω–∞—à–µ –≤—Ä–µ–º—è. –ú—ã —É–∑–Ω–∞–µ–º.`,
        {
          reply_markup: {
            inline_keyboard: buttons,
          },
        },
      )
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async firstStepReg(userId: number, groupId: string, image: string) {
    const buttons = [
      [{ text: '–ü–æ–∫—É–ø–∞—é —á–µ—Ä–µ–∑ —Ç–µ–±—è', callback_data: 'reg_gameName' }],
      [{ text: '–ë—É–¥—É –ø–æ–∫—É–ø–∞—Ç—å —Å–∞–º', callback_data: `buyByMe:${groupId}` }],
      [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data: 'mainMenu' }],
    ];
    if (image) {
      await this.bot.telegram
        .sendPhoto(userId, image, {
          caption: `<b>–û—Ç–ª–∏—á–Ω–æ!</b> \n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∞–∫—Ü–∏—é –∞–ª—å—è–Ω—Å–∞.`,
          reply_markup: {
            inline_keyboard: buttons,
          },
          parse_mode: 'HTML',
        })
        .then(async (res: Message.PhotoMessage) => {
          await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
        })
        .catch((err) => {
          console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', err);
        });
    } else {
      await this.bot.telegram
        .sendMessage(
          userId,
          `<b>–û—Ç–ª–∏—á–Ω–æ!</b> \n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∞–∫—Ü–∏—é –∞–ª—å—è–Ω—Å–∞.`,
          {
            reply_markup: {
              inline_keyboard: buttons,
            },
            parse_mode: 'HTML',
          },
        )
        .then(async (res: Message.TextMessage) => {
          await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
        })
        .catch((err) => {
          console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        });
    }
  }

  async deleteMessageFromUser(userId: number, messagId: number) {
    await this.bot.telegram.deleteMessage(userId, messagId).catch((e) => {
      console.log(e);
    });
  }

  async updateLastMessageAndEditOldMessage(userId: number, messagId: number) {
    const mesId: number | undefined = await this.userService.updateLastMessage(
      userId,
      messagId,
    );
    if (mesId)
      await this.bot.telegram.deleteMessage(userId, mesId).catch(async () => {
        await this.bot.telegram
          .editMessageText(userId, mesId, undefined, '.')
          .catch((e) => {
            console.log(e);
          });
      });

    // await this.bot.telegram
    //   .editMessageText(userId, mesId, undefined, '‚ôªÔ∏è.')
    //   .catch(async () => {
    //     await this.bot.telegram.deleteMessage(userId, mesId).catch((e) => {
    //       console.log(e);
    //     });
    //   });
  }

  async confirmation(userId: number) {
    const user = await this.userService.getUser(userId);
    if (
      !user ||
      !user.reg_groupId ||
      !user.reg_email ||
      !user.reg_gameName ||
      !user.reg_password
    )
      return;

    const group = await this.groupService.getGroup(user.reg_groupId);
    if (!group) return;

    const message = [
      '<b>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</b> \n–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:',
      '',
      `üéì <b>–ì—Ä—É–ø–ø–∞:</b> ${group.promo}`,
      `üéÆ <b>–ò–≥—Ä–æ–≤–æ–µ –∏–º—è:</b> ${user.reg_gameName || '‚Äî'}`,
      `üìß <b>Email:</b> ${user.reg_email || '‚Äî'}`,
      `üîí <b>–ü–∞—Ä–æ–ª—å:</b> ${user.reg_password || '‚Äî'}`,
    ].join('\n');

    const buttons = [
      [{ text: '‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ?', callback_data: 'succssesRegistrtion' }],
      // [{ text: '‚úèÔ∏è –ù–∞–¥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'reg_gameName' }],
      [{ text: '‚úèÔ∏è –ù–∞–¥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'takePlace' }],
    ];

    await this.bot.telegram
      .sendMessage(userId, message, {
        reply_markup: { inline_keyboard: buttons },
        parse_mode: 'HTML',
      })
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async confirmationNoKruger(userId: number) {
    const res: DataNewReg | null =
      await this.groupService.confirmUserInGroupNoKruger(userId);
    console.log(res, '—Ç—É—Ç');
    await this.userService.cleaeRegData(userId);
    if (!res) {
      await this.timeExpiredPlaceLost(userId);
      return;
    }
    const buttons = [
      [
        {
          text: '–í —á–∞—Ç –∑–∞–∫—É–ø–æ–∫',
          url: this.config.get<string>('CHAT_ZAKUPOK')!,
        },
      ],
      [{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }],
    ];
    await this.bot.telegram
      .sendMessage(
        userId,
        `<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b> –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ –≥—Ä—É–ø–ø—É! \n–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å—è–Ω—Å–∞ –ø—Ä–∏–¥–µ—Ç —Å—é–¥–∞ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è –≥—Ä—É–ø–ø–∞ –∏ –º—ã –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–∏–º. \n–ó–∞ —Ö–æ–¥–æ–º –∑–∞–ø–∏—Å–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –≤ —á–∞—Ç–µ –∑–∞–∫—É–ø–∫–∏. \n–í–∞—à–µ –∫–æ–¥–æ–≤–æ–µ –∏–º—è: <b>${res.anonName}</b>\n:( –ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-–ª–∏–±–æ –ø—Ä–∏—á–∏–Ω–∞–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –∑–∞–ø–∏—Å–∏, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @crygerm`,
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: buttons,
          },
        },
      )
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
    const message = [
      `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>${res.name}</code> ${res.kruger ? 'Kruger' : '–°–∞–º'}`,
      '',
      `<a href="tg://user?id=${userId}">üîó –ù–∞–ø–∏—Å–∞—Ç—å</a>`,
      `üòä @${res.username}`,
      `ü™™ <code>${res.promo}</code>`,
      `ü•∏ <code>${res.anonName}</code>`,
      `üéÆ <code>${res.gameName}</code>`,
    ].join('\n');
    // await this.bot.telegram.sendMessage(
    //   this.config.get<number>('GROUP_TELEGRAM_CLOSE')!,
    //   message,
    //   {
    //     parse_mode: 'HTML',
    //   },
    // );
    await this.sendFileByFileId(res.screenNoPromo, message);
    await this.sendOrUpdateMessage(res.groupId, res.messageIdInTelegramGroup);
  }

  async confirmationPresent(userId: number) {
    const res: DataNewReg | null =
      await this.groupService.confirmUserInGroupNoKruger(userId);
    console.log(res, '—Ç—É—Ç');
    await this.userService.cleaeRegData(userId);
    if (!res) {
      return;
    }
    const buttons = [
      [
        {
          text: '–í —á–∞—Ç –∑–∞–∫—É–ø–æ–∫',
          url: this.config.get<string>('CHAT_ZAKUPOK')!,
        },
      ],
      [{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }],
    ];
    await this.bot.telegram
      .sendMessage(
        userId,
        `<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b> –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ –≥—Ä—É–ø–ø—É! \n–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å—è–Ω—Å–∞ –ø—Ä–∏–¥–µ—Ç —Å—é–¥–∞ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è –≥—Ä—É–ø–ø–∞ –∏ –º—ã –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–∏–º. \n–ó–∞ —Ö–æ–¥–æ–º –∑–∞–ø–∏—Å–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –≤ —á–∞—Ç–µ –∑–∞–∫—É–ø–∫–∏. \n–í–∞—à–µ –∫–æ–¥–æ–≤–æ–µ –∏–º—è: <b>${res.anonName}</b>\n:( –ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-–ª–∏–±–æ –ø—Ä–∏—á–∏–Ω–∞–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –∑–∞–ø–∏—Å–∏, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @crygerm`,
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: buttons,
          },
        },
      )
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
    const message = [
      `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>${res.name}</code> –ü–æ–¥–∞—Ä–æ–∫`,
      '',
      `<a href="tg://user?id=${userId}">üîó –ù–∞–ø–∏—Å–∞—Ç—å</a>`,
      `üòä @${res.username}`,
      `ü™™ <code>${res.promo}</code>`,
      `ü•∏ <code>${res.anonName}</code>`,
      `üéÆ <code>${res.gameName}</code>`,
    ].join('\n');
    await this.bot.telegram
      .sendMessage(this.config.get<number>('GROUP_TELEGRAM_CLOSE')!, message, {
        parse_mode: 'HTML',
      })
      .then((res: Message) => {
        console.log(res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
    // await this.sendFileByFileId(res.screenNoPromo, message);
    await this.sendOrUpdateMessage(res.groupId, res.messageIdInTelegramGroup);
  }

  async sendFileByFileId(fileId: string, data: string): Promise<void> {
    try {
      const file = await this.bot.telegram.getFile(fileId);
      const filePath = file?.file_path?.toLowerCase() || '';
      const chatId = this.config.get<number>('GROUP_TELEGRAM_CLOSE')!;

      if (
        filePath.endsWith('.jpg') ||
        filePath.endsWith('.jpeg') ||
        filePath.endsWith('.png') ||
        filePath.endsWith('.webp')
      ) {
        await this.bot.telegram.sendPhoto(chatId, fileId, {
          caption: data,
          parse_mode: 'HTML',
        });
      } else if (filePath.endsWith('.pdf')) {
        await this.bot.telegram.sendDocument(chatId, fileId, {
          caption: data,
          parse_mode: 'HTML',
        });
      } else {
        await this.bot.telegram.sendDocument(chatId, fileId, {
          caption: data,
          parse_mode: 'HTML',
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ file_id.');
    }
  }

  async sendFileByFileIdPaymentProof(
    user: User,
    fileId: string,
  ): Promise<void> {
    try {
      const file = await this.bot.telegram.getFile(fileId);
      const filePath = file?.file_path?.toLowerCase() || '';
      const chatId = this.config.get<number>('GROUP_TELEGRAM_CLOSE')!;
      const data = `–û–ø–ª–∞—Ç–∞: \n${user.first_name} | ${user.username ? '@' + user.username : ''} | ${user.id}`;
      if (
        filePath.endsWith('.jpg') ||
        filePath.endsWith('.jpeg') ||
        filePath.endsWith('.png') ||
        filePath.endsWith('.webp')
      ) {
        await this.bot.telegram.sendPhoto(chatId, fileId, {
          caption: data,
          parse_mode: 'HTML',
        });
      } else if (filePath.endsWith('.pdf')) {
        await this.bot.telegram.sendDocument(chatId, fileId, {
          caption: data,
          parse_mode: 'HTML',
        });
      } else {
        await this.bot.telegram.sendDocument(chatId, fileId, {
          caption: data,
          parse_mode: 'HTML',
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ file_id.');
    }
  }

  async askPassword(userId: number) {
    const buttons = [];
    await this.bot.telegram
      .sendMessage(userId, `–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏`, {
        reply_markup: {
          inline_keyboard: buttons,
        },
      })
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async askEmail(userId: number) {
    const buttons = [];
    await this.bot.telegram
      .sendMessage(userId, `–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ—á—Ç—É –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞`, {
        reply_markup: {
          inline_keyboard: buttons,
        },
      })
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async askGameName(userId: number) {
    const buttons = [];
    await this.bot.telegram
      .sendMessage(
        userId,
        `<b>–°—É–ø–µ—Ä!</b> \n–ü–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –≤ –∏–≥—Ä–µ`,
        {
          reply_markup: {
            inline_keyboard: buttons,
          },
          parse_mode: 'HTML',
        },
      )
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async soldOutMessagePresent(userId: number) {
    const buttons = [
      [
        {
          text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É',
          callback_data: 'takePlacePresent',
        },
      ],
      [{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }],
      [
        {
          text: '–í —á–∞—Ç –∑–∞–∫—É–ø–æ–∫',
          url: this.config.get<string>('CHAT_ZAKUPOK')!,
        },
      ],
    ];
    await this.bot.telegram
      .sendMessage(
        userId,
        `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã :( –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é. –ê–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Ö–æ–¥–µ –∑–∞–ø–∏—Å–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ß–∞—Ç –∑–∞–∫—É–ø–æ–∫"`,
        {
          reply_markup: {
            inline_keyboard: buttons,
          },
        },
      )
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async timeExpiredPlaceLost(userId: number) {
    const buttons = [
      [{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }],
      [
        {
          text: '–í —á–∞—Ç –∑–∞–∫—É–ø–æ–∫',
          url: this.config.get<string>('CHAT_ZAKUPOK')!,
        },
      ],
    ];
    await this.bot.telegram
      .sendMessage(
        userId,
        `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–µ—Ä–æ—è—Ç–Ω–æ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏ –º–µ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`,
        {
          reply_markup: {
            inline_keyboard: buttons,
          },
        },
      )
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async soldOutMessage(userId: number) {
    const buttons = [
      [{ text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É', callback_data: 'takePlace' }],
      [{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }],
      [
        {
          text: '–í —á–∞—Ç –∑–∞–∫—É–ø–æ–∫',
          url: this.config.get<string>('CHAT_ZAKUPOK')!,
        },
      ],
    ];
    await this.bot.telegram
      .sendMessage(
        userId,
        `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã :( –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é. –ê–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Ö–æ–¥–µ –∑–∞–ø–∏—Å–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ß–∞—Ç –∑–∞–∫—É–ø–æ–∫"`,
        {
          reply_markup: {
            inline_keyboard: buttons,
          },
        },
      )
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async extraService(userId: number) {
    const buttons = [[{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }]];
    await this.bot.telegram
      .sendMessage(userId, appText.extraServicesText, {
        reply_markup: {
          inline_keyboard: buttons,
        },
      })
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async faqPresent(userId: number) {
    const buttons = [
      [{ text: '–ü–æ–Ω—è—Ç–Ω–æ, –∑–∞–ø–∏—Å—ã–≤–∞—é—Å—å!', callback_data: 'takePlacePresent' }],
      [{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }],
    ];
    await this.bot.telegram
      .sendMessage(userId, appText.presentHelpText, {
        reply_markup: {
          inline_keyboard: buttons,
        },
      })
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async faq(userId: number) {
    const buttons = [
      [{ text: '–ü–æ–Ω—è—Ç–Ω–æ, –∑–∞–ø–∏—Å—ã–≤–∞—é—Å—å!', callback_data: 'takePlace' }],
      [{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }],
    ];
    await this.bot.telegram
      .sendMessage(userId, appText.mainHelpText, {
        reply_markup: {
          inline_keyboard: buttons,
        },
      })
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async getListUsersOfGroup(groupId: string): Promise<string> {
    const group: Group | null = await this.groupService.getGroup(groupId);
    if (!group) return '–û—à–∏–±–∫–∞';

    const users = group.users || [];
    const total = group.maxCountUsersInGroup || users.length;
    const filledUsers = [...users];

    while (filledUsers.length < total) {
      filledUsers.push(null);
    }

    const filledCount = filledUsers.filter((u) => u?.confirmation).length;

    // –ë–∞—Ç–∞—Ä–µ—è ‚Äî —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
    const battery: string[] = [];
    for (let i = 0; i < total; i++) {
      battery.push(i < filledCount ? 'üîã' : 'ü™´');
    }
    battery.reverse();

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const userLines: string[] = [];
    let step = 1;
    for (const user of filledUsers) {
      const label = user?.status
        ? `<b>${step}: ${user.anonName}</b> ${user.confirmation ? '‚úÖ' : '‚è∞'}`
        : `<b>${step}: </b>---------------`;
      userLines.push(label);
      step++;
    }

    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ‚îÇ
    const combinedLines = battery.map((b, i) => `${b} ‚îÇ ${userLines[i]}`);

    const header = `${group.finish ? 'üèÅ' : ''} ${group.name}\n\nüî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏\nüî∏<b>${group.promo}</b>\nüî∏üî∏üî∏üî∏üî∏üî∏üî∏\n\n`;
    const body = combinedLines.join('\n');
    return `${header}${body}`;
  }

  async confirmUserInGroup(userId: number) {
    const res: DataNewReg | null =
      await this.groupService.confirmUserInGroup(userId);
    console.log(res, '—Ç—É—Ç');
    await this.userService.cleaeRegData(userId);
    if (!res) {
      await this.timeExpiredPlaceLost(userId);
      return;
    }
    const buttons = [
      [
        {
          text: '–í —á–∞—Ç –∑–∞–∫—É–ø–æ–∫',
          url: this.config.get<string>('CHAT_ZAKUPOK')!,
        },
      ],
      [{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }],
    ];
    await this.bot.telegram
      .sendMessage(
        userId,
        `<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b> –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ –≥—Ä—É–ø–ø—É! \n–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å—è–Ω—Å–∞ –ø—Ä–∏–¥–µ—Ç —Å—é–¥–∞ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è –≥—Ä—É–ø–ø–∞ –∏ –º—ã –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–∏–º. \n–ó–∞ —Ö–æ–¥–æ–º –∑–∞–ø–∏—Å–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –≤ —á–∞—Ç–µ –∑–∞–∫—É–ø–∫–∏. \n–í–∞—à–µ –∫–æ–¥–æ–≤–æ–µ –∏–º—è: <b>${res.anonName}</b>\n:( –ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-–ª–∏–±–æ –ø—Ä–∏—á–∏–Ω–∞–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –∑–∞–ø–∏—Å–∏, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @crygerm`,
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: buttons,
          },
        },
      )
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
    const message = [
      `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>${res.name}</code> ${res.kruger ? 'Kruger' : '–°–∞–º'}`,
      '',
      `<a href="tg://user?id=${userId}">üîó –ù–∞–ø–∏—Å–∞—Ç—å</a>`,
      `üòä @${res.username}`,
      `ü™™ <code>${res.promo}</code>`,
      `ü•∏ <code>${res.anonName}</code>`,
      `üéÆ <code>${res.gameName}</code>`,
      `üìß <code>${res.email}</code>`,
      `üîí <code>${res.password}</code>`,
    ].join('\n');
    await this.bot.telegram
      .sendMessage(this.config.get<number>('GROUP_TELEGRAM_CLOSE')!, message, {
        parse_mode: 'HTML',
      })
      .catch((e) => {
        console.log(e);
      });
    await this.sendOrUpdateMessage(res.groupId, res.messageIdInTelegramGroup);
  }

  async sendOrUpdateMessage(groupId: string, messageId: number | undefined) {
    console.log('–ø–æ–ø—ã—Ç–∫–∞');
    const list = await this.getListUsersOfGroup(groupId);
    if (!messageId) {
      await this.sendMessageToGroup(list, groupId);
      return;
    }
    await this.bot.telegram
      .editMessageText(
        Number(this.config.get<number>('GROUP_TELEGRAM_OPEN')!),
        messageId,
        undefined,
        list,
        {
          parse_mode: 'HTML',
        },
      )
      .catch(async (error) => {
        console.log('–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        if (
          error instanceof Error &&
          'response' in error &&
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          (error as any).response?.error_code === 400 &&
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          (error as any).response?.description !==
            'Bad Request: message is not modified: specified new message content and reply markup are exactly the same as a current content and reply markup of the message'
        ) {
          await this.sendMessageToGroup(list, groupId);
        } else {
          throw error; // –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
        }
      });
  }

  async sendMessageToGroup(list: string, groupId: string) {
    const message = await this.bot.telegram
      .sendMessage(this.config.get<number>('GROUP_TELEGRAM_OPEN')!, list, {
        parse_mode: 'HTML',
        message_thread_id: this.config.get<number>('TOPIC')!,
      })
      .catch((e) => {
        console.log(e);
      });
    if (message)
      await this.groupService.updateMessageIdGroup(groupId, message.message_id);
    return;
  }

  async getGroupsButtonsListPresent(userId: number) {
    const allGroups = await this.groupService.getGroupsForButtonsPresent();
    const buttons = allGroups.map((gr) => {
      const total = gr.maxCountUsersInGroup;

      const allFilled = gr.users.filter((u) => u !== null);
      const actualFilled = allFilled.length;

      const hasReserved = gr.users.some(
        (u) => u?.telegramId === userId && u.status === false,
      );

      const displayedCount = hasReserved
        ? Math.max(actualFilled - 1, 0)
        : actualFilled;

      // –£—Å–ø–µ—à–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const confirmedRegs = gr.users.filter(
        (u) => u?.telegramId === userId && u.status === true,
      );

      let suffix = '';
      if (confirmedRegs.length > 0) {
        suffix =
          confirmedRegs.length === 1 ? ' üòä' : ` üòä√ó${confirmedRegs.length}`;
      }

      if (hasReserved) {
        suffix += ' ‚è≥';
      }

      return [
        {
          text: `${gr.promo} (${displayedCount}/${total})${suffix}`,
          callback_data: 'reservPlaceInPresentGroup:' + gr._id,
        },
      ];
    });
    const pickTextForEmptyPresents = () => {
      if (allGroups.length) {
        buttons.push([{ text: '–ó–∞ —á—Ç–æ –ø–æ–¥–∞—Ä–∫–∏', callback_data: 'faqPresent' }]);
        buttons.push([
          { text: '–û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'takePlacePresent' },
          { text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' },
        ]);
        return `<b>–û—Ç–ª–∏—á–Ω–æ –≤ –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å?</b>\n–ü—Ä–æ–¥–æ–ª–∂–∞—è –∑–∞–ø–∏—Å—å –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. \n–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í –Ω–∞—á–∞–ª–æ".`;
      }
      buttons.push([
        { text: '–û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'takePlacePresent' },
        { text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' },
      ]);
      return `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥—Ä—É–ø–ø–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ :( –ó–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @crygerm`;
    };
    await this.bot.telegram
      .sendMessage(userId, pickTextForEmptyPresents(), {
        reply_markup: {
          inline_keyboard: buttons,
        },
        parse_mode: 'HTML',
      })
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async getGroupsButtonsList(userId: number) {
    const allGroups = await this.groupService.getGroupsForButtons();
    const buttons = allGroups.map((gr) => {
      const total = gr.maxCountUsersInGroup;

      const allFilled = gr.users.filter((u) => u !== null);
      const actualFilled = allFilled.length;

      const hasReserved = gr.users.some(
        (u) => u?.telegramId === userId && u.status === false,
      );

      const displayedCount = hasReserved
        ? Math.max(actualFilled - 1, 0)
        : actualFilled;

      // –£—Å–ø–µ—à–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const confirmedRegs = gr.users.filter(
        (u) => u?.telegramId === userId && u.status === true,
      );

      let suffix = '';
      if (confirmedRegs.length > 0) {
        suffix =
          confirmedRegs.length === 1 ? ' üòä' : ` üòä√ó${confirmedRegs.length}`;
      }

      if (hasReserved) {
        suffix += ' ‚è≥';
      }

      return [
        {
          text: `${gr.promo} (${displayedCount}/${total})${suffix}`,
          callback_data: 'reservPlaceInGroup:' + gr._id,
        },
      ];
    });
    buttons.push([
      { text: '–û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'takePlace' },
      { text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' },
    ]);
    // buttons.push([{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }]);
    await this.bot.telegram
      .sendMessage(
        userId,
        `<b>–û—Ç–ª–∏—á–Ω–æ! –≤ –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å?</b>\n–ü—Ä–æ–¥–æ–ª–∂–∞—è –∑–∞–ø–∏—Å—å –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. \n–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í –Ω–∞—á–∞–ª–æ".`,
        {
          reply_markup: {
            inline_keyboard: buttons,
          },
          parse_mode: 'HTML',
        },
      )
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async startMessage(userId: number) {
    await this.bot.telegram
      .sendMessage(
        userId,
        '<b>–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ö—Ä—é–≥–µ—Ä-–±–æ—Ç!</b>üòé \n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–∫—É–ø–∫—É –∞–∫—Ü–∏–π –∞–ª—å—è–Ω—Å–∞!ü§ù',
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–∫—Ü–∏—é –∞–ª—å—è–Ω—Å–∞',
                  callback_data: 'takePlace',
                },
              ],
              [{ text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–µ', callback_data: 'faq' }],
              [
                {
                  text: '–ü–æ–¥–∞—Ä–∫–∏ –æ—Ç –ö—Ä—é–≥–µ—Ä–∞',
                  callback_data: 'takePlacePresent',
                },
              ],
              [
                {
                  text: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
                  callback_data: 'extraService',
                },
              ],
            ],
          },
          parse_mode: 'HTML',
        },
      )
      .then(async (res: Message) => {
        await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      })
      .catch((er) => {
        console.log(er);
      });
  }

  async sendTextMessage(userId: number, text: string) {
    await this.bot.telegram
      .sendMessage(userId, text, { parse_mode: 'HTML' })
      // .then(async (res: Message) => {
      // await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
      // })
      .catch((er) => {
        console.log(er);
      });
  }

  // async sendOneTimeInvite(userId: number) {
  //   const chatId = this.config.get<string>('ID_CHANNEL')!;
  //   const time = Number(this.config.get<string>('TIME_LIFE_LINK')!);
  //   const expireDate = (Math.floor(Date.now() / 1000) + 3600) * time;
  //   const inviteLink = await this.bot.telegram.createChatInviteLink(chatId, {
  //     member_limit: 1,
  //     expire_date: expireDate,
  //     name: `Invite for user ${userId}`,
  //   });
  //   await this.bot.telegram
  //     .sendMessage(
  //       userId,
  //       `–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª (–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: ${time}):\n${inviteLink.invite_link}`,
  //     )
  //     .then(async (res: Message) => {
  //       await this.updateLastMessageAndEditOldMessage(userId, res.message_id);
  //     })
  //     .catch((er) => {
  //       console.log(er);
  //     });
  // }

  async alertUserHaveAccess(userId: string) {
    const user = await this.userService.getUser(Number(userId));
    await this.bot.telegram.sendMessage(
      Number(this.config.get<number>('MANAGER')!),
      `–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n @${user?.username} | ${userId}`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø',
                callback_data: 'closeAccess',
              },
            ],
          ],
        },
      },
    );
  }
}
