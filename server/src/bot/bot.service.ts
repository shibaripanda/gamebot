import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectBot } from 'nestjs-telegraf';
import { DataNewReg } from 'src/app/interfaces/dataNewReg';
import { Group } from 'src/group/group.model';
import { GroupService } from 'src/group/group.service';
import { UserService } from 'src/user/user.service';
import { Telegraf } from 'telegraf';

@Injectable()
export class BotService {
  constructor(
    @InjectBot() private bot: Telegraf,
    private readonly config: ConfigService,
    private groupService: GroupService,
    private userService: UserService,
  ) {}

  async startRegistration(userId: number, groupId: string) {
    const group = await this.groupService.getGroup(groupId);
    console.log(group);
    if (!group) {
      await this.getGroupsButtonsList(userId);
      return;
    }
    const res = await this.groupService.addUserToGroup(groupId, userId);
    if (!res) {
      console.log('soldOut');
      await this.soldOutMessage(userId);
      return;
    }
    await this.userService.addRegData(userId, 'reg_groupId', groupId);
    // await this.userService.addRegData(userId, 'next_step_data', 'reg_gameName');
    await this.firstStepReg(userId);
  }

  async buyByMe(userId: number) {
    const buttons = [
      [{ text: '–ß–µ—Å—Ç–Ω–æ –ø–æ–∫—É–ø–∞—é —Å–∞–º', callback_data: 'buyByMeStartReg' }],
      [{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }],
    ];
    await this.bot.telegram.sendMessage(
      userId,
      `–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º! –ù–æ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
1- –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–µ—Å—Ç. –í—ã –¥–æ–ª–∂–Ω—ã —É—Å–ø–µ—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –ø–µ—Ä–≤—ã—Ö —Ä—è–¥–∞—Ö, –ª–∏–±–æ –ø—Ä–∏–¥–µ—Ç—Å—è –∂–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ä—Ç –≥—Ä—É–ø–ø—ã.
2- –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∫ –Ω–∞–º –≤ –∑–∞–∫—É–ø–∫–∏, –ø–æ–∫—É–ø–∞—è –∞–∫—Ü–∏—é –Ω–µ —É –Ω–∞—Å, —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ! –ü—Ä–æ—à—É, –µ—Å–ª–∏ –≤—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –Ω–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –∞ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å - –Ω–µ —Ç—Ä–∞—Ç—å—Ç–µ –Ω–∞—à–µ –≤—Ä–µ–º—è. –ú—ã —É–∑–Ω–∞–µ–º.`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async firstStepReg(userId: number) {
    const buttons = [
      [{ text: '–ü–æ–∫—É–ø–∞—é —á–µ—Ä–µ–∑ —Ç–µ–±—è', callback_data: 'reg_gameName' }],
      [{ text: '–ë—É–¥—É –ø–æ–∫—É–ø–∞—Ç—å —Å–∞–º', callback_data: 'buyByMe' }],
      [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data: 'mainMenu' }],
    ];
    await this.bot.telegram.sendMessage(
      userId,
      `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∞–∫—Ü–∏—é –∞–ª—å—è–Ω—Å–∞. (–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∞–∫—Ü–∏–∏)`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async confirmation(userId: number) {
    const user = await this.userService.getUser(userId);
    if (
      !user ||
      !user.reg_groupId ||
      !user.reg_email ||
      !user.reg_gameName ||
      !user.reg_password
    )
      return;

    const group = await this.groupService.getGroup(user.reg_groupId);
    if (!group) return;

    const message = [
      '–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:',
      '',
      `üéì –ì—Ä—É–ø–ø–∞: ${group.promo}`,
      `üéÆ –ò–≥—Ä–æ–≤–æ–µ –∏–º—è: ${user.reg_gameName || '‚Äî'}`,
      `üìß Email: ${user.reg_email || '‚Äî'}`,
      `üîí –ü–∞—Ä–æ–ª—å: ${user.reg_password || '‚Äî'}`,
    ].join('\n');

    const buttons = [
      [{ text: '‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ?', callback_data: 'succssesRegistrtion' }],
      // [{ text: '‚úèÔ∏è –ù–∞–¥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'reg_gameName' }],
      [{ text: '‚úèÔ∏è –ù–∞–¥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'takePlace' }],
    ];

    await this.bot.telegram.sendMessage(userId, message, {
      reply_markup: { inline_keyboard: buttons },
    });
  }

  async askPassword(userId: number) {
    const buttons = [];
    await this.bot.telegram.sendMessage(
      userId,
      `–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async askEmail(userId: number) {
    const buttons = [];
    await this.bot.telegram.sendMessage(
      userId,
      `–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ—á—Ç—É –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async askGameName(userId: number) {
    const buttons = [];
    await this.bot.telegram.sendMessage(
      userId,
      `–°—É–ø–µ—Ä! –ü–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –≤ –∏–≥—Ä–µ`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async soldOutMessage(userId: number) {
    const buttons = [
      [{ text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É', callback_data: 'takePlace' }],
      [{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }],
    ];
    await this.bot.telegram.sendMessage(
      userId,
      `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã :( –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é. –ê–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Ö–æ–¥–µ –∑–∞–ø–∏—Å–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ß–∞—Ç –∑–∞–∫—É–ø–æ–∫"`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async extraService(userId: number) {
    const buttons = [[{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }]];
    await this.bot.telegram.sendMessage(
      userId,
      `–ö—Ä–æ–º–µ –¥–æ–Ω–∞—Ç–∞ –≤ –∏–≥—Ä—ã —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –æ–ø–ª–∞—Ç–æ–π –ø–æ–¥–ø–∏—Å–æ–∫ ... —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async faq(userId: number) {
    const buttons = [
      [{ text: '–ü–æ–Ω—è—Ç–Ω–æ, –∑–∞–ø–∏—Å—ã–≤–∞—é—Å—å!', callback_data: 'takePlace' }],
      [{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }],
    ];
    await this.bot.telegram.sendMessage(
      userId,
      `–í–æ—Ç –∫–∞–∫ —Ç—É—Ç –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ: —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω...`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async getListUsersOfGroup(groupId: string): Promise<string> {
    const group: Group | null = await this.groupService.getGroup(groupId);
    if (!group) return '–û—à–∏–±–∫–∞';

    const users = group.users || [];
    const total = group.maxCountUsersInGroup || users.length;
    const filledUsers = [...users];

    while (filledUsers.length < total) {
      filledUsers.push(null);
    }

    const filledCount = filledUsers.filter((u) => u?.confirmation).length;

    // –ë–∞—Ç–∞—Ä–µ—è ‚Äî —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
    const battery: string[] = [];
    for (let i = 0; i < total; i++) {
      battery.push(i < filledCount ? 'üîã' : 'ü™´');
    }
    battery.reverse();

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const userLines: string[] = [];
    let step = 1;
    for (const user of filledUsers) {
      const label = user?.status
        ? `<b>${step}: ${user.confirmation ? '‚úÖüöÄ' : '‚è∞üöÄ'} ${user.anonName}</b>`
        : `<b>${step}: </b>---------------`;
      userLines.push(label);
      step++;
    }

    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ‚îÇ
    const combinedLines = battery.map((b, i) => `${b} ‚îÇ ${userLines[i]}`);

    const header = `${group.name}\n\nüî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏\nüî∏<b>${group.promo}</b>\nüî∏üî∏üî∏üî∏üî∏üî∏üî∏\n\n`;
    const body = combinedLines.join('\n');
    return `${header}${body}`;
  }

  // async getListUsersOfGroup(groupId: string): Promise<string> {
  //   const group: Group | null = await this.groupService.getGroup(groupId);
  //   let step = 1;
  //   if (group) {
  //     let list = `${group.name}\nüî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏\nüî∏${group.promo}\nüî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏\n`;
  //     for (const user of group.users) {
  //       if (user && user.status) {
  //         list = list + `üîã <b>${step}: ` + user.anonName + '</b> üöÄ\n';
  //       } else {
  //         list = list + `ü™´<b>${step}: </b>` + '---' + '\n';
  //       }
  //       step++;
  //     }
  //     return list;
  //   }
  //   return '–û—à–∏–±–∫–∞';
  // }

  async confirmUserInGroup(userId: number) {
    const res: DataNewReg | null =
      await this.groupService.confirmUserInGroup(userId);
    console.log(res, '—Ç—É—Ç');
    await this.userService.cleaeRegData(userId);
    if (!res) {
      return;
    }
    const buttons = [
      [{ text: '–ß–∞—Ç –∑–∞–∫—É–ø–æ–∫', callback_data: '!!!!!!!!!!' }],
      [{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }],
    ];
    await this.bot.telegram.sendMessage(
      userId,
      `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ –≥—Ä—É–ø–ø—É! –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å—è–Ω—Å–∞ –ø—Ä–∏–¥–µ—Ç —Å—é–¥–∞ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è –≥—Ä—É–ø–ø–∞. –ó–∞ —Ö–æ–¥–æ–º –∑–∞–ø–∏—Å–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –≤ —á–∞—Ç–µ –∑–∞–∫—É–ø–∫–∏. –í–∞—à–µ –∫–æ–¥–æ–≤–æ–µ –∏–º—è <b>${res.anonName}</b>`,
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
    const message = [
      `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>${res.name}</code>`,
      '',
      `üòä @${res.username}`,
      `ü™™ <code>${res.promo}</code>`,
      `ü•∏ <code>${res.anonName}</code>`,
      `üéÆ <code>${res.gameName}</code>`,
      `üìß <code>${res.email}</code>`,
      `üîí <code>${res.password}</code>`,
    ].join('\n');
    await this.bot.telegram.sendMessage(
      this.config.get<number>('GROUP_TELEGRAM_CLOSE')!,
      message,
      {
        parse_mode: 'HTML',
      },
    );
    await this.sendOrUpdateMessage(res.groupId, res.messageIdInTelegramGroup);
    // const list = await this.getListUsersOfGroup(res.groupId);
    // if (!res.messageIdInTelegramGroup) {
    //   await this.sendMessageToGroup(list, res.groupId);
    //   return;
    // }
    // await this.bot.telegram
    //   .editMessageText(
    //     this.config.get<number>('GROUP_TELEGRAM_OPEN'),
    //     res.messageIdInTelegramGroup,
    //     undefined,
    //     list,
    //     { parse_mode: 'HTML' },
    //   )
    //   .catch(async (error) => {
    //     if (
    //       error instanceof Error &&
    //       'response' in error &&
    //       // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    //       (error as any).response?.error_code === 400
    //     ) {
    //       await this.sendMessageToGroup(list, res.groupId);
    //     } else {
    //       throw error; // –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
    //     }
    //   });
  }

  async sendOrUpdateMessage(groupId: string, messageId: number | undefined) {
    const list = await this.getListUsersOfGroup(groupId);
    if (!messageId) {
      await this.sendMessageToGroup(list, groupId);
      return;
    }
    await this.bot.telegram
      .editMessageText(
        this.config.get<number>('GROUP_TELEGRAM_OPEN'),
        messageId,
        undefined,
        list,
        { parse_mode: 'HTML' },
      )
      .catch(async (error) => {
        if (
          error instanceof Error &&
          'response' in error &&
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          (error as any).response?.error_code === 400
        ) {
          await this.sendMessageToGroup(list, groupId);
        } else {
          throw error; // –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
        }
      });
  }

  async sendMessageToGroup(list: string, groupId: string) {
    const message = await this.bot.telegram.sendMessage(
      this.config.get<number>('GROUP_TELEGRAM_OPEN')!,
      list,
      { parse_mode: 'HTML' },
    );
    await this.groupService.updateMessageIdGroup(groupId, message.message_id);
    return;
  }

  async getGroupsButtonsList(userId: number) {
    const allGroups = await this.groupService.getGroups();
    const buttons = allGroups.map((gr) => {
      const total = gr.maxCountUsersInGroup;

      const allFilled = gr.users.filter((u) => u !== null);
      const actualFilled = allFilled.length;

      const hasReserved = gr.users.some(
        (u) => u?.telegramId === userId && u.status === false,
      );

      const displayedCount = hasReserved
        ? Math.max(actualFilled - 1, 0)
        : actualFilled;

      // –£—Å–ø–µ—à–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const confirmedRegs = gr.users.filter(
        (u) => u?.telegramId === userId && u.status === true,
      );

      let suffix = '';
      if (confirmedRegs.length > 0) {
        suffix =
          confirmedRegs.length === 1 ? ' üòä' : ` üòä√ó${confirmedRegs.length}`;
      }

      if (hasReserved) {
        suffix += ' ‚è≥';
      }

      return [
        {
          text: `${gr.promo} (${displayedCount}/${total})${suffix}`,
          callback_data: 'reservPlaceInGroup:' + gr._id,
        },
      ];
    });
    buttons.push([
      { text: '–û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'takePlace' },
      { text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' },
    ]);
    // buttons.push([{ text: '–í –Ω–∞—á–∞–ª–æ', callback_data: 'mainMenu' }]);
    await this.bot.telegram.sendMessage(
      userId,
      `–û—Ç–ª–∏—á–Ω–æ –≤ –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å? –ü—Ä–æ–¥–æ–ª–∂–∞—è –∑–∞–ø–∏—Å—å –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö–¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í –Ω–∞—á–∞–ª–æ".`,
      {
        reply_markup: {
          inline_keyboard: buttons,
        },
      },
    );
  }

  async startMessage(userId: number) {
    await this.bot.telegram.sendMessage(
      userId,
      '–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ö—Ä—é–≥–µ—Ä-–±–æ—Ç!üòé –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–∫—É–ø–∫—É –∞–∫—Ü–∏–π –∞–ª—å—è–Ω—Å–∞!ü§ù',
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–∫—Ü–∏—é –∞–ª—å—è–Ω—Å–∞',
                callback_data: 'takePlace',
              },
            ],
            [{ text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–µ', callback_data: 'faq' }],
            [
              {
                text: '–ü–æ–¥–∞—Ä–∫–∏ –æ—Ç –ö—Ä—é–≥–µ—Ä–∞',
                callback_data: 'stopReciveMessages',
              },
            ],
            [
              {
                text: '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
                callback_data: 'extraService',
              },
            ],
          ],
        },
      },
    );
  }

  async sendTextMessage(userId: number, text: string) {
    await this.bot.telegram.sendMessage(userId, text);
  }

  async sendOneTimeInvite(userId: number) {
    const chatId = this.config.get<string>('ID_CHANNEL')!;
    const time = Number(this.config.get<string>('TIME_LIFE_LINK')!);
    const expireDate = (Math.floor(Date.now() / 1000) + 3600) * time;
    const inviteLink = await this.bot.telegram.createChatInviteLink(chatId, {
      member_limit: 1,
      expire_date: expireDate,
      name: `Invite for user ${userId}`,
    });
    await this.bot.telegram.sendMessage(
      userId,
      `–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª (–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: ${time}):\n${inviteLink.invite_link}`,
    );
  }

  async alertUserHaveAccess(userId: string) {
    await this.bot.telegram.sendMessage(
      Number(userId),
      '–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø', callback_data: 'closeAccess' }],
          ],
        },
      },
    );
  }
}
